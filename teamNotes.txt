Team Use this file to send notes to the team.  Use this for permanent notes that may be useful to remind team members.  Otherwise, use Slack as usual. Put the newest stuff on top so it's upfront for everyone to see.  


Testing! 

I use ES6 syntax: It's for  shorter code and only impacts anonymous functions.  One unique thing, it is block scoped.  Google for details if interested but it basically makes "this" and other code behave as you would typically expect it to (it's a fix).  Named functions work the same as before.
(() => {
})

vs.

function() {

}
=============================================================
const & let

let behaves almost exactly like var.  
const is used for values that will not change (few exceptions: a const array's values inside the array can change, etc. but the actual array it points to cannot change. Think of it as what the "constant" points to cannot change).

This is the new way you will use JS, but I particularly like it because it helps prevent errors and conveys to the reader (you or someone else) that the "constant" will not change.  This makes the code a lot easier and quicker to figure out because you know what const points to will never change and if let is used the value SHOULD change.  





Git Quick Summary: 
*Pull from origin master to get the latest changes that are ready to go.

*Push to YOUR master branch (Ex: chance-master).  Then create a manual merge request on the Github website into the Github branch: ("testing")

*Git Master will merge branch: "testing" into the branch: "master"


Longer Explanation:

*Before you start: [ git pull origin master ]
    -this will pull in the latest changes to the code and insure you are working off the latest working version of the code.  
    -this should not cause any conflicts, but if it does STOP and communicate w/ Git Master (unless you know whose code is in conflict w/ yours).  Resolve conflict. 
    -*It's a good idea to do: [ git branch ] to make sure you are on the right branch and pulling in updates to the branch you intend to work off of 

*Checkout a branch to work on a new feature using [git checkout -b nameOfYourBranch ]
    -This will put you on the branch you just created with all the code from your last branch (you should always commit before moving branches).  This essentially creates a copy of the the branch that you just left from the point you just left it.  
    -We create multiple branches because it makes it very easy to go back to a point in time, when you KNOW your code was working correctly.  Also, it's a pretty convenient place to push you code to the rest of the team--when your new feature is working.  Though, use your best judgment of when to push (smaller code pushes are better than large ones)
    -Work on your code as you normally would--committing often.  

*The first time you push it will create a new branch remote branch in Github.  
    -Before you push do a git pull from the master branch to get new content and make sure it works w/ your latest code.  
    -Again, if your code is having issues, resolve before you merge to the testing branch.  
    -If your branch is working correctly, you can do a manual merge request from that branch (make sure it's working correctly). 
    -After creating the merge request, and it's time to work on a new issue you can just create a new branch from the last branch.  Keep in mind if you ever want to get back on master and upload the latest changes you can easily switch to your master branch and do a git pull on any branch you want but if you pull from the remote (Github) master branch it won't have your latest material until it is merged into master.  If you would like to merge 2 local branches: [ git checkout branchYouWant (ex:master) ] then... [ git merge desiredContentBranch ]
    -Rinse/repeat for new branches.

*If at any point you're having issues, create a new branch from that point and then you are free to try a new command etc. 

*Lastly, to go back to your last commit point (hopefully, the last point you know your code was working in the branch) use [ git checkout -- .] This will disregard all your changes made since you last made a commit.  I use this often, but obviously is dangerous if you do this by mistake.  
    




